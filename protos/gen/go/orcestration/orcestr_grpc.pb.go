// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: orcestration/orcestr.proto

package orcestration_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrcestrClient is the client API for Orcestr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrcestrClient interface {
	StopContainer(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	StartContainer(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	RestartContainer(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error)
}

type orcestrClient struct {
	cc grpc.ClientConnInterface
}

func NewOrcestrClient(cc grpc.ClientConnInterface) OrcestrClient {
	return &orcestrClient{cc}
}

func (c *orcestrClient) StopContainer(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/orcestr.Orcestr/StopContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcestrClient) StartContainer(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/orcestr.Orcestr/StartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcestrClient) RestartContainer(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error) {
	out := new(RestartResponse)
	err := c.cc.Invoke(ctx, "/orcestr.Orcestr/RestartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrcestrServer is the server API for Orcestr service.
// All implementations must embed UnimplementedOrcestrServer
// for forward compatibility
type OrcestrServer interface {
	StopContainer(context.Context, *StopRequest) (*StopResponse, error)
	StartContainer(context.Context, *StartRequest) (*StartResponse, error)
	RestartContainer(context.Context, *RestartRequest) (*RestartResponse, error)
	mustEmbedUnimplementedOrcestrServer()
}

// UnimplementedOrcestrServer must be embedded to have forward compatible implementations.
type UnimplementedOrcestrServer struct {
}

func (UnimplementedOrcestrServer) StopContainer(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedOrcestrServer) StartContainer(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedOrcestrServer) RestartContainer(context.Context, *RestartRequest) (*RestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartContainer not implemented")
}
func (UnimplementedOrcestrServer) mustEmbedUnimplementedOrcestrServer() {}

// UnsafeOrcestrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrcestrServer will
// result in compilation errors.
type UnsafeOrcestrServer interface {
	mustEmbedUnimplementedOrcestrServer()
}

func RegisterOrcestrServer(s grpc.ServiceRegistrar, srv OrcestrServer) {
	s.RegisterService(&Orcestr_ServiceDesc, srv)
}

func _Orcestr_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcestrServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orcestr.Orcestr/StopContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcestrServer).StopContainer(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orcestr_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcestrServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orcestr.Orcestr/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcestrServer).StartContainer(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orcestr_RestartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcestrServer).RestartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orcestr.Orcestr/RestartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcestrServer).RestartContainer(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Orcestr_ServiceDesc is the grpc.ServiceDesc for Orcestr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orcestr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orcestr.Orcestr",
	HandlerType: (*OrcestrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopContainer",
			Handler:    _Orcestr_StopContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _Orcestr_StartContainer_Handler,
		},
		{
			MethodName: "RestartContainer",
			Handler:    _Orcestr_RestartContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orcestration/orcestr.proto",
}
